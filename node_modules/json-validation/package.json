{
  "_args": [
    [
      "json-validation",
      "/home/simon/workspace/spacestory"
    ]
  ],
  "_from": "json-validation@latest",
  "_id": "json-validation@1.0.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/json-validation",
  "_phantomChildren": {},
  "_requested": {
    "name": "json-validation",
    "raw": "json-validation",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/json-validation/-/json-validation-1.0.4.tgz",
  "_shasum": "a9091296154d5b88a99e8dfcd27cc879cd19356c",
  "_shrinkwrap": null,
  "_spec": "json-validation",
  "_where": "/home/simon/workspace/spacestory",
  "author": {
    "email": "robin@berjon.com",
    "name": "Robin Berjon"
  },
  "bugs": {
    "url": "https://github.com/darobin/json-validation/issues"
  },
  "dependencies": {
    "underscore": "1.3.3"
  },
  "description": "A simple JSON validation package (subset of JSON Schema)",
  "devDependencies": {
    "expect.js": "0.2.0",
    "mocha": "1.7.3"
  },
  "directories": {},
  "dist": {
    "shasum": "a9091296154d5b88a99e8dfcd27cc879cd19356c",
    "tarball": "https://registry.npmjs.org/json-validation/-/json-validation-1.0.4.tgz"
  },
  "homepage": "https://github.com/darobin/json-validation#readme",
  "main": "lib/json-validation",
  "maintainers": [
    {
      "name": "robin.berjon",
      "email": "robin@berjon.com"
    }
  ],
  "name": "json-validation",
  "optionalDependencies": {},
  "readme": "\n# Overview\n\n`json-validation` is a small library that performs, shockingly enough, validation of\nJSON documents. It supports a limited subset of JSON Schema.\n\n# Installing\n\nThe usual simple:\n\n    npm install json-validation\n\nIn order to run in a browser, you simply need to include the `json-validation.js` file,\nafter having included `underscore.js` on which it depends.\n\n# Why not JSON Schema, one of the existing implementations?\n\nThe reason this library exists is because I initially needed JSON validation in a project.\nI tried to use some of the JSON Schema implementations that exist, but most were out of\ndate. Those that weren't tended to break in the contexts in which I was using them, and\nwere generally rather larger and more complex than my needs. It turned out to be simpler\nto just write a validator that matches my needs.\n\nI release this library on the assumption that if I needed it, others might too. I may\nadd support for more of JSON Schema, and I will certainly take pull requests (so long as\nthey don't cause excessive bloat).\n\nOne notable difference is that JSON Schema support schema referencing one another. Doing\nthat is an explicit non-goal of this library. But it ought to be easy to implement JSON\nreferencing separately (in another small library) and feed schemata with references \nresolved into `json-validation`.\n\n# API\n\nThe API is very simple, the following example probably tells you all you need to know:\n\n```javascript\nvar jv = new JSONValidation();\nvar result = jv.validate(object, schema);\nif (result.ok) {\n    // victory \\o/\n}\nelse {\n    console.log(\"JSON has the following errors: \" + result.errors.join(\", \") + \" at path \" + result.path);\n}\n```\n\n#### var jv = new JSONValidation()\n\nA simple constructor that takes no arguments.\n\n#### var result = jv.validate(object, schema);\n\nThis takes an object that is parsed JSON (or any in-memory equivalent) and a schema that\ncorresponds to the subset of JSON Schema described in the following section. Note that \n`validate()` will throw if you schema is invalid.\n\nThe return value is an object with the following fields:\n\n* `ok`: true if the JSON is valid, false otherwise.\n* `errors`: a list of human-readable strings describing the errors that were encountered. In\n  most cases `json-validation` will only return one single error as it does not currently try\n  to keep processing the JSON when it finds a problem, but in some cases it can return several\n  errors at once, and this is likely to increase going forward (though likely limited to finding\n  several problems with just one item). If there were no errors this array is empty.\n* `path`: a string indicating the path in the object at which the errors were found. It looks like\n  `$root.field1.field2[5]`. The idea is that if you replace `$root` with the object you passed you\n  will get to the problematic value (this is intended for human debugging though).\n\n# Supported schema constructs\n\nA schema is basically a nested structure of objects that describe the constraints on a JSON\ninstance at that nesting level. Each of these objects is keyed off a specific fundamental \n`type`, and the constraints that can be applied to the value depend on that fundamental type.\n\n### null\n\nThe object is `null`.\n\nExample schema:\n\n    { \"type\": \"null\" }\n\nNo additional constraints.\n\n### any\n\nAbsolutely anything goes here.\n\nExample schema:\n\n    { \"type\": \"any\" }\n\nNo additional constraints.\n\n### boolean\n\nThe object is a boolean value (true or false). Note that this is strictly for booleans,\nand not for values that are truthy or falsy.\n\nExample schema:\n\n    { \"type\": \"boolean\" }\n\nOther example:    \n\n    {\n        \"type\": \"boolean\"\n    ,   \"enum\": [true]\n    }\n\nAdditional constraints:\n\n* `enum`: The object must match one of the values in the `enum` array. Since the boolean\n  type only takes two values this constraint is only ever useful if you wish to restrict\n  a value to either always being true or always being false (as in the second example above).\n\n### string\n\nThe object is a string. A number of constraints on length, patterns, and enumerations apply.\nNote that these are strictly strings and not objects that stringify.\n\nExample schemata:\n\n    { \"type\": \"string\" }\n    \n    {\n        \"type\": \"string\"\n    ,   \"enum\": [\"carrot\", \"banana\", \"donkey\"]\n    }\n    \n    {\n        \"type\": \"string\"\n    ,   \"pattern\": \"a{3}\\\\d\\\\d\"\n    }\n    \n    {\n        \"type\": \"string\"\n    ,   \"minLength\": 2\n    ,   \"maxLength\": 17\n    }\n\nAdditional constraints:\n\n* `enum`: The object must match one of the values in the `enum` array. All of these\n  must be strings.\n* `pattern`: A regular expression that the string must match. Note that since it is\n  conveyed as a string you will need to escape backslashes.\n  Additional constraints:\n* `minLength` and `maxLength`: The minimal and maximal length of the string (inclusive).\n\n### number\n\nThe object is a number. It can be further constrained on enumeration, minimum, and\nmaximum values.\n\nExample schemata:\n\n    { \"type\": \"number\" }\n    \n    {\n        \"type\": \"number\"\n    ,   \"enum\": [5, 17, 23, 42]\n    }\n    \n    {\n        \"type\": \"number\"\n    ,   \"minimum\": 23\n    ,   \"exclusiveMaximum\": 57.2\n    }\n\nAdditional constraints:\n\n* `enum`: The object must match one of the values in the `enum` array. All of these\n  must be numbers.\n* `minimum`, `maximum`, `exclusiveMinimum`, and `exclusiveMaximum`: minimal and\n  maximal boundaries on the number's value, either inclusive or exclusive.\n\n\n### object\n\nThe object is, well, an object. Its properties can be enumerated and themselves \nrecursively defined and constrained.\n\nExample schemata:\n\n    { \"type\": \"object\" }\n    \n    {\n        \"type\": \"object\"\n    ,   \"properties\": {\n            \"fullName\":  { \"type\": \"string\", \"required\": true }\n        ,   \"age\":       { \"type\": \"number\", \"minimum\": 0 }\n        ,   \"superHeroIdentity\": {\n                \"type\": \"object\"\n            ,   \"coolName\": { \"type\": \"string\" }\n            ,   \"superPower\": {\n                    \"type\": \"string\"\n                ,   \"enum\": [\"flying\", \"telekinesis\", \"parsing MIME\"]\n                }\n            }\n        }\n    }\n\nAdditional constraint:\n\n* `properties`: This is a simply an object the keys of which are those that are\n  being constrained on the object (object keys not listed here are not only allowed\n  but also unconstrained). The values for those keys are the types of the values\n  for the matching fields in JSON instances.\n\nIn addition to its regular type information, each property value can also take a\nboolean constraint called `required`. If set to true, then this field must be\npresent in the instance (the default is for it to be optional).\n\n### array\n\nThe object is an array. This can be further constrained with minimal and maximal\nlengths, as well as with constraints on the types of the objects contained in the\narray.\n\nExample schemata:\n\n    { \"type\": \"array\" }\n    \n    {\n        \"type\":         \"array\"\n    ,   \"minItems\":     3\n    ,   \"maxItems\":     200\n    ,   \"items\":        { \"type\": \"number\" }\n    ,   \"uniqueItems\":  true\n    }\n    \n    {\n        \"type\":             \"array\"\n    ,   \"items\":            [ { \"type\": \"number\" }, { \"type\": \"string\" }, { \"type\": \"string\" } ]\n    ,   \"additionalItems\":  true\n    }\n\nAdditional constraints:\n\n* `minItems` and `maxItems`: The minimal and maximal length of the array, inclusive.\n* `items` (with a type): When `items` is a type definition, then all array members will be\n  validated against that type.\n* `items` (with an array): When `items` is an array of type definitions, then the array members\n  at a given offset will be validated against the type definition at the same offset. The array\n  instance is implicitly constrained to be of the same length as the `items` constraint, unless\n  `additionalItems` is specified.\n* `additionalItems`: In the case of an array-based `items`, a boolean that allows for additional array members\n  after those constrained by the provided types. Those additional members are not validated.\n* `uniqueItems`: If true, checks that the values in the array are unique (using ===, recursively).\n\n### Union types\n\nIt is also possible to define union types, which is to say, cases in which validation will be\ntried against multiple type definitions until one matches or the list of options in the union\nis exhausted.\n\nExample schemata:\n\n    { \"type\": [\"number\", \"string\"] }\n    \n    {\n        \"type\": [\n            { \"type\": \"string\", \"pattern\": \"^\\\\w+$\" }\n        ,   { \"type\": \"array\", \"minItems\": 3 }\n        ,   \"boolean\"\n        ]\n    }\n\nA union is defined by providing an array of options for the `type`. Each item in that array may\nbe either just the string name of a fundamental type, or a full-fledged type definition. If none\nof the types match, then the validation fails.\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/darobin/json-validation.git"
  },
  "version": "1.0.4"
}
